name: Update Schedule
on:
  schedule:
    - cron: '0 11 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Puppeteer
        run: |
          npm install puppeteer
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      - name: Download schedule with headless browser
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            try {
              const page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
              await page.setExtraHTTPHeaders({
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': 'https://daddylive.live/'
              });

              console.log('Navigating to page...');
              await page.goto('https://daddylive.mp/schedule/schedule-generated.php', {
                waitUntil: 'networkidle2',
                timeout: 60000
              });

              console.log('Waiting for content...');
              await page.waitForSelector('body', { timeout: 30000 });

              const content = await page.content();
              fs.writeFileSync('schedule.json', content);
              console.log('Content saved successfully');

            } catch (error) {
              console.error('Error during scraping:', error);
              process.exit(1);
            } finally {
              await browser.close();
            }
          })();
          EOF

      - name: Validate JSON
        run: |
          if ! jq empty schedule.json; then
            echo "::error::Invalid JSON format"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add schedule.json
          
          if git diff --quiet --cached; then
            echo "No changes to schedule.json"
          else
            git commit -m "Update schedule.json [skip ci]"
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          fi

      - name: Archive schedule
        uses: actions/upload-artifact@v4
        with:
          name: schedule-backup
          path: schedule.json
          retention-days: 3

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Schedule Update Failed',
              body: 'The daily schedule update workflow failed. Please check the logs.'
            });
